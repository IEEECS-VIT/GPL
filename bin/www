#!/usr/bin/env node
/*
 *  GraVITas Premier League <gravitaspremierleague@gmail.com>
 *  Copyright (C) 2014  IEEE Computer Society - VIT Student Chapter <ieeecs@vit.ac.in>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var log,
	server,

	path = require("path").join,
	exit = require("forever").stop,
	debug = require("debug")("GPL"),
	app = require(path(__dirname, "..", "app")),
	mongo = require("mongodb").MongoClient.connect;

if (process.env.NEWRELIC_APP_NAME && process.env.NEWRELIC_LICENSE)
{
	require(path(__dirname, "..", "utils", "misc", "newrelic")); // eslint-disable-line global-require
}

if (process.env.LOGENTRIES_TOKEN)
{
	// eslint-disable-next-line global-require
	log = require("node-logentries").logger({ token: process.env.LOGENTRIES_TOKEN });
}

app.set("port", process.env.PORT || 3000);

var onBind = function ()
{
	if (log)
    {
		log.log("info", { MongoUri: process.env.MONGO, Port: server.address().port });

		if (process.env.HOSTNAME)
        {
			log.log("info", { Application: process.env.HOSTNAME });
		}
	}

	debug(`Node.js Express server listening on port ${server.address().port}`);
	debug(`Using MongoDB: ${process.env.MONGO}`);

	if (process.env.HOSTNAME)
    {
		debug(process.env.HOSTNAME);
	}
};

mongo(process.env.MONGO, function (err, database) {
	if (err)
    {
		throw new Error(process.env.NODE_ENV ? "process.env.MONGO does not contain a valid connection URI."
                                   : "The mongod localhost server is not running on port 27017.");
	}

	db = database; // global db variable is for persistent database connections, without bloating request middleware
	server = app.listen(app.get("port"), onBind);
});

process.on("SIGINT", function (err) {
	if (err)
    {
		console.error(err);
	}

	db.close();
	exit();
});
